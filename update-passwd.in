#!/bin/sh
#
# Merge Fink's passwd and group additions into NetInfo
#

#NOTE:
# AKH, 3 December 2012: Not yet usable, but I wanted to get it into public

if [ `id -u` -ne 0 ]; then
	echo "You must be root to run update-passwd."
	exit 1
fi

PREFIX=@PREFIX@

name="$1"
info="$2"
home="$3"
shell="$4"
groupname="$5"
groupmembership="$6" 

merge_group_info() {
    # put in main just like merge_user_info because it only gets called once
	FILE="$1"
	GROUP="$2"
	case `uname -r` in
		8*)
			niload group . <$FILE
			;;
		*)
			OIFS=$IFS
			IFS=:
			cat $FILE | grep $GROUP | while read name passwd gid GroupMembership; do
				gidtest=`dscl . list Groups PrimaryGroupID | grep $gid`
				if [ "x$gidtest" = "x" ] ; then
					dscl . create /groups/$groupname
					dscl . create /groups/$groupname name $groupname
					dscl . create /groups/$groupname passwd '*'
					dscl . create /groups/$groupname gid $gid
					dscl . create /groups/$groupname GroupMembership $GroupMembership
				else
					echo
					echo "WARNING: GID $gid is in use by:"
					echo
					echo $gidtest
					echo
					echo "I am not overwriting this."
					echo "You will need to edit $PREFIX/etc/group-fink manually"
					echo "and set the GID entry for $FINK_PASSWD_USER to an unused"
					echo "value."
					echo
				fi
			done
			IFS=$OIFS
			;;
	esac
}

### Verify that update-passwd was called correctly

if [ ! $6 ]; then
	echo "update-passwd needs 6 arguments:"
        echo "update-passwd username info home shell groupname groupmembership"
	exit 1
fi

### check for existing user

idcheck=`/usr/bin/id $name 2>/dev/null`
if [ "x$idcheck" = "x" ]; then
    echo "'$name' user exists, with parameters:"
    echo
    echo $idcheck
    echo
    echo "Fink will use these settings."
    ADDUSER=0
else
    ADDUSER=1
fi    

# check for existing group
idcheck=`dscl . -read /Groups/$groupname 2>/dev/null`
if [ "x$idcheck" = "x" ]; then
    echo "'$groupname' group exists, with parameters:"
    echo
    echo $idcheck
    echo
    echo "Fink will use these settings."
    ADDGROUP=0
else
    ADDGROUP=1
fi    

# We can exit with success if both the user and group are available

if [ [ $ADDUSER -eq 0 ] -a [ $ADDGROUP -eq 0 ] ] ; then
    exit 0
fi

# otherwise, press on

### dynamic UID/GID allocation

uid=0
gid=0
# Test passwd.conf
if [ "x"`grep AutoUid: $PREFIX/etc/passwd.conf` = "x" ] ; then
    #Auto ID
    uidmin=`grep AutoUidMin $PREFIX/etc/fink.conf | cut d: -f2`
    uidmax=`grep AutoUidMax $PREFIX/etc/fink.conf | cut d: -f2`
    #uid
    printf "AutoUID is configured.  Locating an unused ID between %d and %d\n" uidmin uidmax
    if [ $ADDUSER -ne 0 ] ; then
        for test_id in {$uidmin..$uidmax} ; do
            check_id=`id $test_id 2&>/dev/null | grep uid`
        	if [ "x"$check_id = "x" ] ; then 
        	    uid=$check_uid
        	    break
        	fi
        done
        if [ $uid -eq 0 ] ; then
            # bail if we can't allocate a UID
            printf "I couldn't find an unused UID in the range %d - %d.\n" $uidmin $uidmax 
            printf "You can expand this range by changing the AutoUidMin and/or\n"
            printf "AutoUidMax values in @PREFIX@/etc/passwd.conf .\n"
            exit 1
        fi
    fi
    
    #gid
    if [ $ADDGROUP -ne 0 ] ; then
	    for test_id in {$uidmin..$uidmax} ; do
    	    check_id=`id $test_id 2&>/dev/null | grep gid`
        	if [ "x"$check_id = "x" ] ; then 
            	gid=$check_uid
            	break
	        fi
    	done
	    if [ $gid -eq 0 ] ; then
    	    # bail if we can't allocate a GID
        	printf "I couldn't find an unused GID in the range %d - %d.\n" $uidmin $uidmax 
            printf "You can expand this range by changing the AutoUidMin and/or\n"
            printf "AutoUidMax values in @PREFIX@/etc/passwd.conf .\n"
    	    exit 1
	    fi
    fi
else
    #manual entries
    #TODO
	# read value, check if in use.
fi

echo
echo "The following user entry will be added to your DirectoryServices database:"
echo "RecordName: "$name
echo "UniqueID: "$uid
echo "Primary Group ID: "$gid
echo "RealName: "$info
echo "NFSHomeDirectory: "$home
echo "UserShell: "$shell

echo
	echo "Some Fink packages will not work unless these entries are in the"
	echo "DirectoryServices database. Fink can use existing entries with"
	echo "these names, however, if they exist on the system, and this package"
	echo "will check for them."
	echo "You can also make any desired adjustments to the files"
	echo "$PREFIX/etc/passwd-fink and $PREFIX/etc/group-fink" 
	echo "now (from another window), then say yes here."
	echo "Or you can say no here and add the users and groups manually"
	echo "(e.g. on your central Open Directory server)." 
	echo "If you don't know what all of this is about, it is safe to say yes."
/bin/echo "Do you want to continue? [Y/n] \c"
read answer

answer=`echo $answer | sed 's/^[yY].*$/y/'`

if [ -z "$answer" -o "x$answer" = "xy" ]; then
	echo
	if [ "x$idcheck" = "x" ]; then
		echo "Merging user info..."	
		dscl . create /users/$name
		dscl . create /users/$name name $name
		dscl . create /users/$name passwd '*'
		dscl . create /users/$name hint ""
		dscl . create /users/$name uid $uid
		dscl . create /users/$name gid $gid
		dscl . create /users/$name home "$home"
		dscl . create /users/$name shell "$shell"
		dscl . create /users/$name realname "$info"
		dscl . delete /users/$name AuthenticationAuthority
	else
		echo "$USER user exists, with parameters:"
		echo
		echo $idcheck
		echo
		echo "Fink will use these."
	fi
		echo "Merging group info..."
		merge_group_info "$PREFIX/etc/group-fink" $USER
		echo "Done."
else
	echo "Okay, not adding the entries."
fi
echo

exit 0
